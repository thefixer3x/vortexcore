name: üõ°Ô∏è Protect and Backup Project

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PROJECT_NAME: "vortex-core-app"
  BACKUP_BRANCH: "backup/$(date +%Y%m%d)"

jobs:
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Security audit
      run: bun audit
      
    - name: Check for secrets
      uses: gitleaks/gitleaks-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run ESLint security rules
      run: bun run lint:security || echo "No security linting configured"

  critical-files-check:
    name: üìÅ Critical Files Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify critical directories exist
      run: |
        echo "üîç Checking critical project structure..."
        
        # Check source code directory
        if [ ! -d "src" ]; then
          echo "‚ùå CRITICAL: src/ directory missing!"
          exit 1
        fi
        
        # Check configuration files
        if [ ! -f "package.json" ]; then
          echo "‚ùå CRITICAL: package.json missing!"
          exit 1
        fi
        
        if [ ! -f "tsconfig.json" ]; then
          echo "‚ùå CRITICAL: tsconfig.json missing!"
          exit 1
        fi
        
        if [ ! -f "vite.config.ts" ]; then
          echo "‚ùå CRITICAL: vite.config.ts missing!"
          exit 1
        fi
        
        # Check database schema
        if [ ! -d "supabase" ]; then
          echo "‚ùå CRITICAL: supabase/ directory missing!"
          exit 1
        fi
        
        echo "‚úÖ All critical files and directories present"
        
    - name: Count source files
      run: |
        echo "üìä Project Statistics:"
        echo "Source files: $(find src -name '*.ts' -o -name '*.tsx' | wc -l)"
        echo "Components: $(find src/components -name '*.tsx' | wc -l)"
        echo "Pages: $(find src/pages -name '*.tsx' | wc -l)"
        echo "Functions: $(find supabase/functions -name '*.ts' | wc -l)"

  automated-backup:
    name: üíæ Automated Backup
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Create backup branch
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        
        # Create backup branch
        git checkout -b ${{ env.BACKUP_BRANCH }}
        
        # Create backup manifest
        echo "# Project Backup - $(date)" > BACKUP_MANIFEST.md
        echo "" >> BACKUP_MANIFEST.md
        echo "## Files Backed Up:" >> BACKUP_MANIFEST.md
        find . -type f -not -path "./node_modules/*" -not -path "./.git/*" | head -100 >> BACKUP_MANIFEST.md
        echo "" >> BACKUP_MANIFEST.md
        echo "## Git Status:" >> BACKUP_MANIFEST.md
        git status >> BACKUP_MANIFEST.md
        
        # Commit backup
        git add BACKUP_MANIFEST.md
        git commit -m "üíæ Automated backup - $(date)"
        
    - name: Push backup branch
      run: |
        git push origin ${{ env.BACKUP_BRANCH }}
        
    - name: Create backup issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üíæ Automated Backup Created - ${new Date().toISOString().split('T')[0]}`,
            body: `## Backup Summary\n\n- **Backup Branch**: \`${{ env.BACKUP_BRANCH }}\`\n- **Created**: ${new Date().toISOString()}\n- **Trigger**: ${{ github.event_name }}\n\n## What's Protected\n\n- ‚úÖ Source code\n- ‚úÖ Configuration files\n- ‚úÖ Database schema\n- ‚úÖ Dependencies\n- ‚úÖ Documentation\n\n## Recovery\n\nIf the project is wiped out again, restore from this backup branch.\n\n**NEVER AGAIN should this project be wiped out!**`,
            labels: ['backup', 'automated', 'protection']
          })

  protection-alert:
    name: üö® Protection Alert
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Send protection alert
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `üö® PROTECTION ALERT - Workflow Failed`,
            body: `## üö® PROTECTION ALERT\n\n**Workflow**: ${{ github.workflow }}\n**Job**: ${{ github.job }}\n**Failed at**: ${new Date().toISOString()}\n\n## What Happened\n\nA protection workflow failed, which could indicate a security issue or project integrity problem.\n\n## Immediate Actions Required\n\n1. **Review the failed workflow**\n2. **Check for unauthorized changes**\n3. **Verify project integrity**\n4. **Restore from backup if needed**\n\n## Prevention\n\n- Ensure branch protection is enabled\n- Require pull request reviews\n- Monitor for critical file changes\n\n**This is the 3rd time projects are being wiped out - we must prevent it!**`,
            labels: ['alert', 'protection', 'security', 'urgent']
          })

  post-protection:
    name: üõ°Ô∏è Post-Protection Summary
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Protection summary
      run: |
        echo "üõ°Ô∏è PROTECTION WORKFLOW COMPLETED"
        echo "================================"
        echo "Project: ${{ env.PROJECT_NAME }}"
        echo "Status: ${{ job.status }}"
        echo "Time: $(date)"
        echo ""
        echo "‚úÖ Security scan completed"
        echo "‚úÖ Critical files verified"
        echo "‚úÖ Backup created (if scheduled)"
        echo "‚úÖ Protection alerts configured"
        echo ""
        echo "üõ°Ô∏è Your project is now protected!"
        echo "üö® Alerts will notify you of any issues"
        echo "üíæ Automatic backups run daily"
        echo ""
        echo "NEVER AGAIN should this project be wiped out!"
