name: Launch Readiness CI

on:
  push:
    branches:
      - main
      - dev-cleanup
  pull_request:
    branches:
      - main

jobs:
  # Phase 1: Foundation Testing
  foundation-testing:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Print environment and lockfiles
      run: |
        echo "Node: $(node -v || true)"
        echo "Bun: $(bun -v || true)"
        ls -1 || true
        echo "Lockfiles present:"; ls -1 bun.lockb || true; ls -1 package-lock.json || true
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Run unit tests
      run: bun test
    
    - name: Run component tests
      run: bun run test:components || true # Allow failure initially
    
    - name: Test coverage report
      run: bun run test:coverage || true # Allow failure initially

  # Phase 1: E2E Testing
  e2e-testing:
    runs-on: ubuntu-latest
    needs: foundation-testing
    steps:
    - uses: actions/checkout@v4
    - name: Print environment and lockfiles
      run: |
        echo "Node: $(node -v || true)"
        echo "Bun: $(bun -v || true)"
        ls -1 || true
        echo "Lockfiles present:"; ls -1 bun.lockb || true; ls -1 package-lock.json || true
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Setup Playwright dependencies
      uses: microsoft/playwright-github-action@v1
      with:
        install-dependencies: true
    
    - name: Install Playwright
      run: bunx playwright install
    
    - name: Build application
      run: bun run build
    
    - name: Run E2E tests
      run: bun run test:e2e || true # Allow failure initially
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: test-results/
        if-no-files-found: ignore

  # Phase 2: Build and Feature Validation
  feature-validation:
    runs-on: ubuntu-latest
    needs: foundation-testing
    steps:
    - uses: actions/checkout@v4
    - name: Print environment and lockfiles
      run: |
        echo "Node: $(node -v || true)"
        echo "Bun: $(bun -v || true)"
        ls -1 || true
        echo "Lockfiles present:"; ls -1 bun.lockb || true; ls -1 package-lock.json || true
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Type checking
      run: bun run build
    
    - name: Linting
      run: bun run lint
    
    - name: Feature completeness check
      run: |
        echo "Checking feature completeness..."
        # Add custom scripts to validate feature completeness
        
  # Phase 3: Security Testing
  security-testing:
    runs-on: ubuntu-latest
    needs: feature-validation
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Run security audit
      run: bun audit || true # Allow failure initially
    
    - name: Dependency vulnerability scan
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: high
    
    - name: Security linting
      run: |
        echo "Running security-focused linting..."
        # Add ESLint security rules
        
  # Phase 4: Performance Testing
  performance-testing:
    runs-on: ubuntu-latest
    needs: feature-validation
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
    
    - name: Install dependencies
      run: bun install --frozen-lockfile
    
    - name: Build for performance testing
      run: bun run build
    
    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add Lighthouse CI or similar
        
  # Phase 5: Launch Readiness Check
  rls-validation:
    runs-on: ubuntu-latest
    needs: feature-validation
    steps:
    - uses: actions/checkout@v4
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client jq
    - name: Run RLS snapshot (optional)
      env:
        PG_CONN: ${{ secrets.SUPABASE_DB_CONNECTION_STRING }}
      run: |
        set -e
        if [ -z "$PG_CONN" ]; then
          echo "No SUPABASE_DB_CONNECTION_STRING provided; skipping RLS snapshot."
          echo "RLS_SNAPSHOT_SKIPPED=1" >> $GITHUB_ENV
        else
          echo "Running RLS snapshot via psql"
          echo "\n-- RLS Snapshot $(date)" > rls-validation-report.txt
          psql "$PG_CONN" -v ON_ERROR_STOP=1 -f scripts/rls-validate.sql >> rls-validation-report.txt
        fi
    - name: Optional REST-based deny-by-default checks
      env:
        SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        TEST_USER_A_JWT: ${{ secrets.TEST_USER_A_JWT }}
        TEST_USER_B_JWT: ${{ secrets.TEST_USER_B_JWT }}
      run: |
        set -e
        if [ -z "$SUPABASE_URL" ] || [ -z "$VITE_SUPABASE_ANON_KEY" ] || [ -z "$TEST_USER_A_JWT" ] || [ -z "$TEST_USER_B_JWT" ]; then
          echo "REST RLS checks not configured; skipping"
          exit 0
        fi
        echo "\n-- REST deny-by-default checks" >> rls-validation-report.txt
        for t in wallets conversations child_profiles transactions ai_chat_sessions vortex_settings stripe_customers; do
          A=$(curl -s -H "apikey: ${VITE_SUPABASE_ANON_KEY}" -H "Authorization: Bearer ${TEST_USER_A_JWT}" "$SUPABASE_URL/rest/v1/$t?select=*&limit=1" | jq 'length') || true
          B=$(curl -s -H "apikey: ${VITE_SUPABASE_ANON_KEY}" -H "Authorization: Bearer ${TEST_USER_B_JWT}" "$SUPABASE_URL/rest/v1/$t?select=*&limit=1" | jq 'length') || true
          echo "$t: userA=$A userB=$B" >> rls-validation-report.txt
        done
    - name: Upload RLS validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rls-validation-report
        path: rls-validation-report.txt

  # Phase 6: Launch Readiness Check
  launch-readiness:
    runs-on: ubuntu-latest
    needs: [e2e-testing, security-testing, performance-testing, rls-validation]
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Compute readiness and generate report
      env:
        E2E_RESULT: ${{ needs.e2e-testing.result }}
        SECURITY_RESULT: ${{ needs.security-testing.result }}
        PERFORMANCE_RESULT: ${{ needs.performance-testing.result }}
        RLS_RESULT: ${{ needs.rls-validation.result }}
        GIT_SHA: ${{ github.sha }}
      run: |
        echo "🚀 Validating launch readiness..."
        echo "- e2e-testing result: ${E2E_RESULT}"
        echo "- security-testing result: ${SECURITY_RESULT}"
        echo "- performance-testing result: ${PERFORMANCE_RESULT}"
        echo "- rls-validation result: ${RLS_RESULT}"

        pass_icon() { [ "$1" = "success" ] && echo "✅" || echo "❌"; }

        E2E_ICON=$(pass_icon "$E2E_RESULT")
        SEC_ICON=$(pass_icon "$SECURITY_RESULT")
        PERF_ICON=$(pass_icon "$PERFORMANCE_RESULT")

        OVERALL="PASS"
        if [ "$E2E_RESULT" != "success" ] || [ "$SECURITY_RESULT" != "success" ] || [ "$PERFORMANCE_RESULT" != "success" ] || [ "$RLS_RESULT" != "success" ]; then
          OVERALL="FAIL"
        fi

        {
          echo "# Launch Readiness Report"
          echo "Generated: $(date)"
          echo "Commit: ${GIT_SHA}"
          echo ""
          echo "## Phase Results"
          echo "- E2E Testing: ${E2E_ICON} (${E2E_RESULT})"
          echo "- Security Testing: ${SEC_ICON} (${SECURITY_RESULT})"
          echo "- Performance Testing: ${PERF_ICON} (${PERFORMANCE_RESULT})"
          echo "- RLS Validation: $(pass_icon "$RLS_RESULT") (${RLS_RESULT})"
          echo ""
          echo "## Overall Status"
          echo "${OVERALL}"
        } > launch-report.md

        if [ "$OVERALL" = "FAIL" ]; then
          echo "❌ Launch readiness failed — see report." >&2
          exit 1
        else
          echo "🎉 Ready for consumer launch!"
        fi
        
    - name: Upload launch readiness report
      uses: actions/upload-artifact@v4
      with:
        name: launch-readiness-report
        path: launch-report.md
